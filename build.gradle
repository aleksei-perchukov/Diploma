plugins {
    id 'java'
    id 'io.qameta.allure' version '2.10.0'
    id "io.freefair.lombok" version '6.0.0-m2'
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

def allureVersion = "2.19.0",
    selenideVersion = "6.9.0",
    restAssuredVersion = "5.2.0",
    appiumVersion = "8.2.0",
    junitVersion = "5.9.0",
    commonsIoVersion = "2.11.0",
    slf4jVersion = "2.0.3",
    assertJVersion = "3.23.1"

allure {
    report {
        version.set(allureVersion)
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
}

dependencies {
    testImplementation("com.codeborne:selenide:$selenideVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "io.qameta.allure:allure-rest-assured:$allureVersion",
            "io.rest-assured:rest-assured:$restAssuredVersion",
            "org.assertj:assertj-core:$assertJVersion",
            "io.appium:java-client:$appiumVersion",
            'com.fasterxml.jackson.core:jackson-databind:2.13.4.2',
            "org.junit.jupiter:junit-jupiter:$junitVersion",
            "org.slf4j:slf4j-simple:$slf4jVersion",
            'org.junit.jupiter:junit-jupiter:5.9.0',
            'org.aeonbits.owner:owner:1.0.12',
            "commons-io:commons-io:$commonsIoVersion",
            'com.github.javafaker:javafaker:1.0.2'
    )
    testRuntimeOnly('org.aspectj:aspectjweaver:1.9.9.1')
}

compileTestJava {
    options.encoding = 'UTF-8'
}
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

tasks.withType(Test) {
    systemProperty "file.encoding", "utf-8"
    systemProperties(System.getProperties())
    if (System.getProperty("threads") != null) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads").toInteger()
        ]
    }
    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}
test {
    useJUnitPlatform()
}

task ui_tests(type: Test) {
    useJUnitPlatform {
        includeTags "UI"
    }
}

task api_tests(type: Test) {
    useJUnitPlatform {
        includeTags "API"
    }
}

task ui_api_tests(type: Test) {
    useJUnitPlatform {
        includeTags "UI", "API"
    }
}

task mobile_tests(type: Test) {
    useJUnitPlatform {
        includeTags "Mobile"
    }
}